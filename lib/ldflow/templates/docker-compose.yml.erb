services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ES_VERSION:?}
    container_name: ${ES_CONTAINER_NAME:?}
    environment:
      discovery.type: single-node
      ELASTIC_PASSWORD: ${ES_PASSWORD:?}
      ES_JAVA_OPTS: -Xms${ES_HEAP_INIT:-128m} -Xmx${ES_HEAP_MAX:-2g}
      xpack.monitoring.collection.enabled: "true"
      xpack.security.enabled: "false"
<%- if `uname -m` =~ /^(arm64|aarch64)/ -%>
      _JAVA_OPTIONS: -XX:UseSVE=0
<%- end -%>
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --output /dev/null --silent --head --fail -u elastic:${ES_PASSWORD:?} http://elasticsearch:${ES_PORT:-9200}",
        ]
      interval: 10s
      timeout: 10s
      retries: 30
    ports:
      - "${ES_PORT:-9200}:9200"
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data

<%- if @options[:kibana] -%>
  kibana:
    image: docker.elastic.co/kibana/kibana:${ES_VERSION:?}
    container_name: ${KIBANA_CONTAINER_NAME:?}
    environment:
      SERVER_NAME: kibana
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      ELASTICSEARCH_USERNAME: kibana_system
      ELASTICSEARCH_PASSWORD: ${KIBANA_PASSWORD:?}
      I18N_LOCALE: ja-JP
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://kibana:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 30
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    volumes:
      - kibana:/usr/share/kibana/data
<%- end -%>

  redis:
    image: redis:7
    container_name: ${REDIS_CONTAINER_NAME:?}
    volumes:
      - redis:/data

  db:
    image: postgres:16
    container_name: ${DB_CONTAINER_NAME:?}
    env_file: &superset-env
      - path: docker/.env # default
        required: true
      - path: docker/.env-local # optional override
        required: false
    volumes:
      - db:/var/lib/postgresql/data
      - ./docker/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d

  superset: &superset
    image: apachesuperset.docker.scarf.sh/apache/superset:${SS_VERSION:?}
    container_name: ${SS_CONTAINER_NAME:?}
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_started
    user: "root"
    command: ["/app/docker/docker-bootstrap.sh", "app-gunicorn"]
    env_file: *superset-env
    ports:
      - "${SS_PORT:-8088}:8088"
    volumes:
      - superset:/app/superset_home
      - ./docker:/app/docker

  superset-worker:
    <<: *superset
    container_name: ${SS_WORKER_CONTAINER_NAME:?}
    command: ["/app/docker/docker-bootstrap.sh", "worker"]
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "celery -A superset.tasks.celery_app:app inspect ping -d celery@$$HOSTNAME",
        ]
    ports: []

  superset-worker-beat:
    <<: *superset
    container_name: ${SS_WORKER_BEAT_CONTAINER_NAME:?}
    command: ["/app/docker/docker-bootstrap.sh", "beat"]
    ports: []

volumes:
  db:
  elasticsearch:
<%- if @options[:kibana] -%>
  kibana:
<%-end -%>
  redis:
  superset:
